@model List<_3TLMiniSoccer.Models.CartItem>

@{
    ViewData["Title"] = "Giỏ hàng";
}

<section class="py-16 bg-gray-50">
    <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
            <!-- Header -->
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-900 mb-4">Giỏ hàng của bạn</h1>
                <p class="text-lg text-gray-600">Quản lý các sản phẩm đã chọn</p>
            </div>

            @if (Model.Any())
            {
                <div class="grid lg:grid-cols-3 gap-8">
                    <!-- Cart Items -->
                    <div class="lg:col-span-2">
                        <div class="bg-white rounded-xl shadow-lg p-6">
                            <h2 class="text-xl font-bold mb-6 text-gray-900">Sản phẩm đã chọn</h2>
                            
                            <div class="space-y-6">
                                @foreach (var item in Model)
                                {
                                    <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <div class="flex justify-between items-start mb-4">
                                            <div class="flex-1">
                                                <h3 class="text-lg font-semibold text-gray-900">@item.Product?.ProductName</h3>
                                                <p class="text-sm text-gray-600">@item.Product?.Description</p>
                                                <p class="text-sm text-gray-600">Giá: @item.Product?.Price.ToString("N0") VND</p>
                                            </div>
                                            <div class="text-right">
                                                <p class="text-lg font-bold text-green-600">@((item.Quantity * item.Product?.Price ?? 0).ToString("N0")) VND</p>
                                            </div>
                                        </div>
                                        
                                        <div class="grid grid-cols-2 gap-4 mb-4">
                                            <div>
                                                <p class="text-sm text-gray-600">Số lượng:</p>
                                                <div class="flex items-center space-x-2">
                                                    <form asp-action="UpdateQuantity" method="post" class="flex items-center space-x-2">
                                                        <input type="hidden" name="cartItemId" value="@item.CartItemId" />
                                                        <input type="number" name="quantity" value="@item.Quantity" min="1" max="10" 
                                                               class="w-16 px-2 py-1 border border-gray-300 rounded text-center" />
                                                        <button type="submit" class="text-blue-600 hover:text-blue-800 text-sm">
                                                            Cập nhật
                                                        </button>
                                                    </form>
                                                </div>
                                            </div>
                                            <div>
                                                <p class="text-sm text-gray-600">Thành tiền:</p>
                                                <p class="font-medium">@((item.Quantity * item.Product?.Price ?? 0).ToString("N0")) VND</p>
                                            </div>
                                        </div>
                                        
                                        <div class="flex space-x-2">
                                            <a href="@Url.Action("Details", "Product", new { id = item.ProductId })" 
                                               class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg text-center text-sm font-medium hover:bg-blue-700 transition-colors">
                                                Xem chi tiết
                                            </a>
                                            <form asp-action="RemoveItem" method="post" class="inline">
                                                <input type="hidden" name="cartItemId" value="@item.CartItemId" />
                                                <button type="submit" 
                                                        class="bg-red-600 text-white py-2 px-4 rounded-lg text-sm font-medium hover:bg-red-700 transition-colors"
                                                        onclick="return confirm('Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?')">
                                                    Xóa
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Cart Summary -->
                    <div class="lg:col-span-1">
                        <div class="bg-white rounded-xl shadow-lg p-6 sticky top-4">
                            <h3 class="text-lg font-bold text-gray-900 mb-4">Tổng kết</h3>
                            
                            <div class="space-y-3 mb-6">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Số sản phẩm:</span>
                                    <span class="font-medium">@Model.Count</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Tổng tiền:</span>
                                    <span class="font-bold text-green-600">@ViewBag.CartTotal.ToString("N0") VND</span>
                                </div>
                            </div>
                            
                            <div class="space-y-3">
                                <button class="w-full bg-green-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-green-700 transition-colors">
                                    Thanh toán tất cả
                                </button>
                                
                                <form asp-action="ClearCart" method="post">
                                    <button type="submit" 
                                            class="w-full bg-gray-200 text-gray-800 py-3 px-6 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                                            onclick="return confirm('Bạn có chắc muốn xóa tất cả sản phẩm khỏi giỏ hàng?')">
                                        Xóa tất cả
                                    </button>
                                </form>
                                
                                <a href="@Url.Action("Index", "Product")" 
                                   class="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition-colors text-center block">
                                    Tiếp tục mua sắm
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Empty Cart -->
                <div class="text-center py-16">
                    <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                        <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">Giỏ hàng trống</h3>
                    <p class="text-gray-600 mb-6">Bạn chưa có sản phẩm nào trong giỏ hàng.</p>
                    <a href="@Url.Action("Index", "Product")" 
                       class="inline-flex items-center px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Mua sắm ngay
                    </a>
                </div>
            }
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Update quantity functionality
    const updateForms = document.querySelectorAll('form[action*="UpdateQuantity"]');
    updateForms.forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(form);
            const cartItemId = formData.get('cartItemId');
            const quantity = formData.get('quantity');
            
            try {
                const response = await fetch('/Cart/UpdateQuantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: `cartItemId=${cartItemId}&quantity=${quantity}`
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        showNotification(result.message, 'success');
                        // Reload page to update totals
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    } else {
                        showNotification(result.message, 'error');
                    }
                }
            } catch (error) {
                showNotification('Có lỗi xảy ra khi cập nhật số lượng!', 'error');
            }
        });
    });
    
    // Remove item functionality
    const removeButtons = document.querySelectorAll('button[onclick*="confirm"]');
    removeButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
            e.preventDefault();
            
            if (confirm('Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?')) {
                const form = button.closest('form');
                const formData = new FormData(form);
                const cartItemId = formData.get('cartItemId');
                
                try {
                    const response = await fetch('/Cart/RemoveItem', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: `cartItemId=${cartItemId}`
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            showNotification(result.message, 'success');
                            // Remove the item from DOM
                            const itemElement = button.closest('.border');
                            itemElement.remove();
                            
                            // Update cart count in header
                            updateCartCount();
                            
                            // Reload page to update totals
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        } else {
                            showNotification(result.message, 'error');
                        }
                    }
                } catch (error) {
                    showNotification('Có lỗi xảy ra khi xóa sản phẩm!', 'error');
                }
            }
        });
    });
    
    // Clear cart functionality
    const clearCartButton = document.querySelector('button[onclick*="confirm"][onclick*="xóa tất cả"]');
    if (clearCartButton) {
        clearCartButton.addEventListener('click', async (e) => {
            e.preventDefault();
            
            if (confirm('Bạn có chắc muốn xóa tất cả sản phẩm khỏi giỏ hàng?')) {
                try {
                    const response = await fetch('/Cart/ClearCart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            showNotification(result.message, 'success');
                            // Update cart count in header
                            updateCartCount();
                            // Reload page
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        } else {
                            showNotification(result.message, 'error');
                        }
                    }
                } catch (error) {
                    showNotification('Có lỗi xảy ra khi xóa giỏ hàng!', 'error');
                }
            }
        });
    }
});

// Update cart count function
async function updateCartCount() {
    try {
        const response = await fetch('/Cart/GetCartCount', {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            const cartCountElement = document.querySelector('.cart-count');
            
            if (data.count > 0) {
                if (cartCountElement) {
                    cartCountElement.textContent = data.count;
                } else {
                    // Create cart count element if it doesn't exist
                    const cartLink = document.querySelector('a[href*="/Cart"]');
                    if (cartLink) {
                        const cartIcon = cartLink.querySelector('svg').parentElement;
                        const badge = document.createElement('span');
                        badge.className = 'absolute -top-2 -right-2 bg-accent text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center cart-count';
                        badge.textContent = data.count;
                        cartIcon.appendChild(badge);
                    }
                }
            } else {
                // Remove cart count if empty
                const cartCountElement = document.querySelector('.cart-count');
                if (cartCountElement) {
                    cartCountElement.remove();
                }
            }
        }
    } catch (error) {
        console.error('Error updating cart count:', error);
    }
}

// Notification function
function showNotification(message, type) {
    // Remove existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white font-medium transform transition-all duration-300 ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}
</script>