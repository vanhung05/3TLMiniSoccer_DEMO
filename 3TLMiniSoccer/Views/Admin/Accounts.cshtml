@model _3TLMiniSoccer.ViewModels.AccountListViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Quản lý tài khoản";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Header Actions -->
<div class="flex justify-between items-center mb-6">
  <h1 class="text-2xl font-bold text-gray-800">Danh sách tài khoản</h1>
  <button class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2" onclick="openAddAccountModal()">
    <i data-lucide="plus" class="w-4 h-4"></i>
    <span>Thêm tài khoản</span>
  </button>
</div>

<!-- Quick Stats -->
<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center">
      <div class="p-3 rounded-full bg-blue-100 text-blue-500">
        <i data-lucide="users" class="w-6 h-6"></i>
      </div>
      <div class="ml-4">
        <p class="text-sm text-gray-500">Tổng tài khoản</p>
        <p class="text-2xl font-bold">@Model.Stats.TotalAccounts</p>
      </div>
    </div>
  </div>
  
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center">
      <div class="p-3 rounded-full bg-green-100 text-green-500">
        <i data-lucide="user-check" class="w-6 h-6"></i>
      </div>
      <div class="ml-4">
        <p class="text-sm text-gray-500">Tài khoản hoạt động</p>
        <p class="text-2xl font-bold">@Model.Stats.ActiveAccounts</p>
        <p class="text-xs text-gray-400">@Model.Stats.ActivePercentage%</p>
      </div>
    </div>
  </div>
  
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center">
      <div class="p-3 rounded-full bg-yellow-100 text-yellow-500">
        <i data-lucide="user-x" class="w-6 h-6"></i>
      </div>
      <div class="ml-4">
        <p class="text-sm text-gray-500">Tài khoản bị khóa</p>
        <p class="text-2xl font-bold">@Model.Stats.InactiveAccounts</p>
        <p class="text-xs text-gray-400">@Model.Stats.InactivePercentage%</p>
      </div>
    </div>
  </div>
  
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center">
      <div class="p-3 rounded-full bg-purple-100 text-purple-500">
        <i data-lucide="crown" class="w-6 h-6"></i>
      </div>
      <div class="ml-4">
        <p class="text-sm text-gray-500">Admin</p>
        <p class="text-2xl font-bold">@Model.Stats.AdminAccounts</p>
        <p class="text-xs text-gray-400">@Model.Stats.AdminPercentage%</p>
      </div>
    </div>
  </div>
</div>

<!-- Filters and Search -->
<div class="bg-white rounded-lg shadow p-4 mb-6">
  <form method="get" action="@Url.Action("Accounts")" id="filterForm">
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Tìm kiếm</label>
        <input type="text" name="SearchTerm" value="@Model.Filter.SearchTerm" placeholder="Tên, email, SĐT..." class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Vai trò</label>
        @Html.DropDownList("Role", new List<SelectListItem>
        {
          new SelectListItem { Value = "", Text = "Tất cả", Selected = string.IsNullOrEmpty(Model.Filter.Role) },
          new SelectListItem { Value = "admin", Text = "Admin", Selected = Model.Filter.Role == "admin" },
          new SelectListItem { Value = "staff", Text = "Nhân viên", Selected = Model.Filter.Role == "staff" },
          new SelectListItem { Value = "user", Text = "Khách hàng", Selected = Model.Filter.Role == "user" }
        }, new { @class = "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" })
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Trạng thái</label>
        @Html.DropDownList("Status", new List<SelectListItem>
        {
          new SelectListItem { Value = "", Text = "Tất cả", Selected = string.IsNullOrEmpty(Model.Filter.Status) },
          new SelectListItem { Value = "active", Text = "Hoạt động", Selected = Model.Filter.Status == "active" },
          new SelectListItem { Value = "inactive", Text = "Bị khóa", Selected = Model.Filter.Status == "inactive" },
          new SelectListItem { Value = "pending", Text = "Chờ xác thực", Selected = Model.Filter.Status == "pending" }
        }, new { @class = "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" })
      </div>
      <div class="flex items-end space-x-2">
        <button type="submit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md">
          <i data-lucide="search" class="w-4 h-4 inline mr-2"></i>
          Tìm kiếm
        </button>
        <a href="@Url.Action("Accounts")" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-md">
          <i data-lucide="x" class="w-4 h-4"></i>
        </a>
      </div>
    </div>
  </form>
</div>

<!-- Accounts Table -->
<div class="bg-white rounded-lg shadow overflow-hidden">
  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
            <input type="checkbox" class="rounded border-gray-300">
          </th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tài khoản</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vai trò</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Liên hệ</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày tạo</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trạng thái</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Thao tác</th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        @if (Model.Accounts.Any())
        {
          @foreach (var account in Model.Accounts)
          {
            <tr>
              <td class="px-6 py-4 whitespace-nowrap">
                <input type="checkbox" class="rounded border-gray-300" value="@account.UserId">
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div class="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center mr-4">
                    @if (!string.IsNullOrEmpty(account.Avatar))
                    {
                      <img src="@account.DisplayAvatar" alt="Avatar" class="w-10 h-10 rounded-full object-cover">
                    }
                    else
                    {
                      <i data-lucide="user" class="w-5 h-5 text-gray-500"></i>
                    }
                  </div>
                  <div>
                    <div class="text-sm font-medium text-gray-900">@account.FullName</div>
                    <div class="text-sm text-gray-500">@account.Email</div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @account.RoleClass">
                  @account.RoleName
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@(account.PhoneNumber ?? "Chưa có")</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@account.FormattedCreatedAt</td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @account.StatusClass">
                  @account.StatusText
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div class="flex space-x-2">
                  <button class="text-blue-600 hover:text-blue-900" onclick="editAccount(@account.UserId)" title="Chỉnh sửa">
                    <i data-lucide="edit" class="w-4 h-4"></i>
                  </button>
                  @if (account.IsActive)
                  {
                    <button class="text-yellow-600 hover:text-yellow-900" onclick="toggleAccountStatus(@account.UserId)" title="Khóa tài khoản">
                      <i data-lucide="lock" class="w-4 h-4"></i>
                    </button>
                  }
                  else
                  {
                    <button class="text-green-600 hover:text-green-900" onclick="toggleAccountStatus(@account.UserId)" title="Mở khóa tài khoản">
                      <i data-lucide="unlock" class="w-4 h-4"></i>
                    </button>
                  }
                  @if (account.CanDelete)
                  {
                    <button class="text-red-600 hover:text-red-900" onclick="deleteAccount(@account.UserId)" title="Xóa tài khoản">
                      <i data-lucide="trash-2" class="w-4 h-4"></i>
                    </button>
                  }
                  else
                  {
                    <button class="text-gray-400 cursor-not-allowed" disabled title="Không thể xóa Admin">
                      <i data-lucide="trash-2" class="w-4 h-4"></i>
                    </button>
                  }
                </div>
              </td>
            </tr>
          }
        }
        else
        {
          <tr>
            <td colspan="7" class="px-6 py-12 text-center">
              <div class="flex flex-col items-center">
                <i data-lucide="users" class="w-12 h-12 text-gray-400 mb-4"></i>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Chưa có tài khoản nào</h3>
                <p class="text-gray-500 mb-4">Bắt đầu bằng cách tạo tài khoản đầu tiên.</p>
                <button onclick="openAddAccountModal()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg">
                  Thêm tài khoản
                </button>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
  
  <!-- Pagination -->
  @if (Model.TotalPages > 1)
  {
    <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
      <div class="flex-1 flex justify-between sm:hidden">
        @if (Model.HasPreviousPage)
        {
          <a href="?SearchTerm=@Model.Filter.SearchTerm&Role=@Model.Filter.Role&Status=@Model.Filter.Status&Page=@(Model.CurrentPage - 1)" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Trước
          </a>
        }
        @if (Model.HasNextPage)
        {
          <a href="?SearchTerm=@Model.Filter.SearchTerm&Role=@Model.Filter.Role&Status=@Model.Filter.Status&Page=@(Model.CurrentPage + 1)" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
            Sau
          </a>
        }
      </div>
      <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
        <div>
          <p class="text-sm text-gray-700">
            Hiển thị <span class="font-medium">@((Model.CurrentPage - 1) * Model.PageSize + 1)</span> đến <span class="font-medium">@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalAccounts)</span> của <span class="font-medium">@Model.TotalAccounts</span> kết quả
          </p>
        </div>
        <div>
          <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            @if (Model.HasPreviousPage)
            {
              <a href="?SearchTerm=@Model.Filter.SearchTerm&Role=@Model.Filter.Role&Status=@Model.Filter.Status&Page=@(Model.CurrentPage - 1)" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                <i data-lucide="chevron-left" class="w-4 h-4"></i>
              </a>
            }
            
            @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
            {
              if (i == Model.CurrentPage)
              {
                <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-green-50 text-sm font-medium text-green-600">
                  @i
                </span>
              }
              else
              {
                <a href="?SearchTerm=@Model.Filter.SearchTerm&Role=@Model.Filter.Role&Status=@Model.Filter.Status&Page=@i" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                  @i
                </a>
              }
            }
            
            @if (Model.HasNextPage)
            {
              <a href="?SearchTerm=@Model.Filter.SearchTerm&Role=@Model.Filter.Role&Status=@Model.Filter.Status&Page=@(Model.CurrentPage + 1)" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                <i data-lucide="chevron-right" class="w-4 h-4"></i>
              </a>
            }
          </nav>
        </div>
      </div>
    </div>
  }
</div>

<!-- Add/Edit Account Modal -->
<div id="accountModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Thêm tài khoản mới</h3>
        <button onclick="closeAccountModal()" class="text-gray-400 hover:text-gray-600">
          <i data-lucide="x" class="w-6 h-6"></i>
        </button>
      </div>
      
      <form id="accountForm" class="space-y-4">
        <input type="hidden" id="accountUserId" name="UserId" value="0">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Tên đăng nhập *</label>
            <input type="text" id="accountUsername" name="Username" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập tên đăng nhập">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Email *</label>
            <input type="email" id="accountEmail" name="Email" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="example@email.com">
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Họ *</label>
            <input type="text" id="accountFirstName" name="FirstName" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập họ">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Tên *</label>
            <input type="text" id="accountLastName" name="LastName" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập tên">
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Số điện thoại</label>
            <input type="tel" id="accountPhoneNumber" name="PhoneNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="0912xxx123">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Vai trò *</label>
            <select id="accountRoleId" name="RoleId" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
              <option value="">Chọn vai trò</option>
            </select>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4" id="passwordFields">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Mật khẩu <span id="passwordRequired">*</span></label>
            <input type="password" id="accountPassword" name="Password" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập mật khẩu">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Xác nhận mật khẩu <span id="confirmPasswordRequired">*</span></label>
            <input type="password" id="accountConfirmPassword" name="ConfirmPassword" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập lại mật khẩu">
          </div>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Địa chỉ</label>
          <textarea id="accountAddress" name="Address" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập địa chỉ..."></textarea>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Trạng thái</label>
            <select id="accountIsActive" name="IsActive" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
              <option value="true">Hoạt động</option>
              <option value="false">Bị khóa</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Xác thực email</label>
            <select id="accountEmailConfirmed" name="EmailConfirmed" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
              <option value="true">Đã xác thực</option>
              <option value="false">Chưa xác thực</option>
            </select>
          </div>
        </div>
        
        <div class="flex justify-end space-x-3 pt-4">
          <button type="button" onclick="closeAccountModal()" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
            Hủy
          </button>
          <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">
            Lưu tài khoản
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  let isEditMode = false;
  let roles = [];

  // Load roles when page loads
  document.addEventListener('DOMContentLoaded', async function() {
    await loadRoles();
  });

  // Load roles from server
  async function loadRoles() {
    try {
      const response = await fetch('@Url.Action("GetRoles", "Admin")');
      const data = await response.json();
      
      if (data.success) {
        roles = data.roles;
        populateRoleDropdown();
      }
    } catch (error) {
      console.error('Error loading roles:', error);
    }
  }

  // Populate role dropdown
  function populateRoleDropdown() {
    const roleSelect = document.getElementById('accountRoleId');
    roleSelect.innerHTML = '<option value="">Chọn vai trò</option>';
    
    roles.forEach(role => {
      const option = document.createElement('option');
      option.value = role.roleId;
      option.textContent = role.roleName;
      roleSelect.appendChild(option);
    });
  }

  // Account modal functions
  function openAddAccountModal() {
    isEditMode = false;
    document.getElementById('modalTitle').textContent = 'Thêm tài khoản mới';
    document.getElementById('accountForm').reset();
    document.getElementById('accountUserId').value = '0';
    
    // Show password fields and make them required
    document.getElementById('passwordFields').style.display = 'grid';
    document.getElementById('accountPassword').required = true;
    document.getElementById('accountConfirmPassword').required = true;
    document.getElementById('passwordRequired').style.display = 'inline';
    document.getElementById('confirmPasswordRequired').style.display = 'inline';
    
    populateRoleDropdown();
    document.getElementById('accountModal').classList.remove('hidden');
  }

  async function editAccount(id) {
    isEditMode = true;
    document.getElementById('modalTitle').textContent = 'Chỉnh sửa tài khoản';
    
    try {
      const response = await fetch(`@Url.Action("GetAccount", "Admin")?id=${id}`);
      const data = await response.json();
      
      if (data.success) {
        const account = data.account;
        
        // Populate form fields
        document.getElementById('accountUserId').value = account.userId;
        document.getElementById('accountUsername').value = account.username;
        document.getElementById('accountEmail').value = account.email;
        document.getElementById('accountFirstName').value = account.firstName;
        document.getElementById('accountLastName').value = account.lastName;
        document.getElementById('accountPhoneNumber').value = account.phoneNumber || '';
        document.getElementById('accountAddress').value = account.address || '';
        document.getElementById('accountIsActive').value = account.isActive.toString();
        document.getElementById('accountEmailConfirmed').value = account.emailConfirmed.toString();
        
        // Populate roles and select current role
        roles = data.roles;
        populateRoleDropdown();
        document.getElementById('accountRoleId').value = account.roleId;
        
        // Hide password fields and make them optional
        document.getElementById('passwordFields').style.display = 'none';
        document.getElementById('accountPassword').required = false;
        document.getElementById('accountConfirmPassword').required = false;
        
        document.getElementById('accountModal').classList.remove('hidden');
      } else {
        alert(data.message || 'Không thể tải thông tin tài khoản!');
      }
    } catch (error) {
      console.error('Error loading account:', error);
      alert('Có lỗi xảy ra khi tải thông tin tài khoản!');
    }
  }

  async function toggleAccountStatus(id) {
    if (confirm('Bạn có chắc chắn muốn thay đổi trạng thái tài khoản này?')) {
      try {
        const response = await fetch('@Url.Action("ToggleAccountStatus", "Admin")', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
          },
          body: JSON.stringify({ id: id })
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert(data.message);
          location.reload();
        } else {
          alert(data.message || 'Có lỗi xảy ra!');
        }
      } catch (error) {
        console.error('Error toggling account status:', error);
        alert('Có lỗi xảy ra khi thay đổi trạng thái!');
      }
    }
  }

  async function deleteAccount(id) {
    if (confirm('Bạn có chắc chắn muốn xóa tài khoản này? Hành động này không thể hoàn tác!')) {
      try {
        const response = await fetch('@Url.Action("DeleteAccount", "Admin")', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
          },
          body: JSON.stringify({ id: id })
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert(data.message);
          location.reload();
        } else {
          alert(data.message || 'Có lỗi xảy ra!');
        }
      } catch (error) {
        console.error('Error deleting account:', error);
        alert('Có lỗi xảy ra khi xóa tài khoản!');
      }
    }
  }

  function closeAccountModal() {
    document.getElementById('accountModal').classList.add('hidden');
    document.getElementById('accountForm').reset();
  }

  // Form submission
  document.getElementById('accountForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    
    // Validate password confirmation
    if (!isEditMode && data.Password !== data.ConfirmPassword) {
      alert('Mật khẩu xác nhận không khớp!');
      return;
    }
    
    try {
      const url = isEditMode ? '@Url.Action("UpdateAccount", "Admin")' : '@Url.Action("CreateAccount", "Admin")';
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
        },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert(result.message);
        closeAccountModal();
        location.reload();
      } else {
        alert(result.message || 'Có lỗi xảy ra!');
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      alert('Có lỗi xảy ra khi lưu tài khoản!');
    }
  });
</script>