@model _3TLMiniSoccer.ViewModels.ContactAdminViewModel
@{
    ViewData["Title"] = "Liên hệ";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="flex-1 overflow-y-auto p-6 bg-gray-50">
    <!-- Header Actions -->
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-800">Quản lý liên hệ</h1>
        <div class="flex space-x-2">
            <button class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2">
                <i data-lucide="download" class="w-4 h-4"></i>
                <span>Xuất báo cáo</span>
            </button>
            <button class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2">
                <i data-lucide="refresh-cw" class="w-4 h-4"></i>
                <span>Làm mới</span>
            </button>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-blue-100 text-blue-500">
                    <i data-lucide="message-square" class="w-6 h-6"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Tổng tin nhắn</p>
                    <p class="text-2xl font-bold">@Model.Statistics.TotalContacts</p>
                </div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-green-100 text-green-500">
                    <i data-lucide="check-circle" class="w-6 h-6"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Đã phản hồi</p>
                    <p class="text-2xl font-bold">@Model.Statistics.RepliedContacts</p>
                </div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-yellow-100 text-yellow-500">
                    <i data-lucide="clock" class="w-6 h-6"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Đã đọc</p>
                    <p class="text-2xl font-bold">@Model.Statistics.ReadContacts</p>
                </div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-red-100 text-red-500">
                    <i data-lucide="x-circle" class="w-6 h-6"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-500">Chưa đọc</p>
                    <p class="text-2xl font-bold">@Model.Statistics.NewContacts</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="bg-white rounded-lg shadow p-4 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Tìm kiếm</label>
                <input type="text" id="searchInput" placeholder="Tên, email, nội dung..." value="@Model.Search" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Trạng thái</label>
                <select id="statusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                    <option value="">Tất cả trạng thái</option>
                    <option value="New" selected="@(Model.Status == "New")">Chưa đọc</option>
                    <option value="Read" selected="@(Model.Status == "Read")">Đã đọc</option>
                    <option value="Replied" selected="@(Model.Status == "Replied")">Đã phản hồi</option>
                    <option value="Closed" selected="@(Model.Status == "Closed")">Đã đóng</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Loại</label>
                <select id="typeFilter" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                    <option value="">Tất cả loại</option>
                    <option value="booking" selected="@(Model.Type == "booking")">Đặt sân</option>
                    <option value="complaint" selected="@(Model.Type == "complaint")">Khiếu nại</option>
                    <option value="suggestion" selected="@(Model.Type == "suggestion")">Góp ý</option>
                    <option value="other" selected="@(Model.Type == "other")">Khác</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Ngày gửi</label>
                <input type="date" id="dateFilter" value="@(Model.CreatedDate?.ToString("yyyy-MM-dd"))" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
            </div>
            <div class="flex items-end">
                <button class="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md">
                    <i data-lucide="search" class="w-4 h-4 inline mr-2"></i>
                    Tìm kiếm
                </button>
            </div>
        </div>
    </div>

    <!-- Contact Messages Table -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Người gửi</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Loại</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nội dung</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ngày gửi</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trạng thái</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Thao tác</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @if (Model.Contacts.Any())
                    {
                        @foreach (var contact in Model.Contacts)
                        {
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="w-10 h-10 rounded-full @GetContactAvatarClass(contact.Status) flex items-center justify-center">
                                            <i data-lucide="user" class="w-5 h-5 @GetContactIconClass(contact.Status)"></i>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">@contact.Name</div>
                                            <div class="text-sm text-gray-500">@(contact.Phone ?? "N/A")</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@contact.Email</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @GetTypeBadgeClass(contact.Subject)">
                                        @GetContactType(contact.Subject)
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 max-w-xs truncate">
                                    @(contact.Message.Length > 50 ? contact.Message.Substring(0, 50) + "..." : contact.Message)
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@contact.CreatedAt.ToString("dd/MM/yyyy")</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @GetStatusBadgeClass(contact.Status)">
                                        @GetStatusText(contact.Status)
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex space-x-2">
                                        <button class="text-blue-600 hover:text-blue-900" onclick="viewMessage(@contact.ContactId)">
                                            <i data-lucide="eye" class="w-4 h-4"></i>
                                        </button>
                                        @if (contact.Status != "Replied" && contact.Status != "Closed")
                                        {
                                            <button class="text-green-600 hover:text-green-900" onclick="replyMessage(@contact.ContactId)">
                                                <i data-lucide="reply" class="w-4 h-4"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="text-gray-400 cursor-not-allowed" disabled>
                                                <i data-lucide="reply" class="w-4 h-4"></i>
                                            </button>
                                        }
                                        <button class="text-red-600 hover:text-red-900" onclick="deleteMessage(@contact.ContactId)">
                                            <i data-lucide="trash-2" class="w-4 h-4"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="px-6 py-4 text-center text-gray-500">
                                Không có tin nhắn nào
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <div class="flex-1 flex justify-between sm:hidden">
                @if (Model.Page > 1)
                {
                    <a href="@Url.Action("Contact", new { page = Model.Page - 1, pageSize = Model.PageSize, search = Model.Search, status = Model.Status, type = Model.Type, createdDate = Model.CreatedDate })" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                        Trước
                    </a>
                }
                @if (Model.Page < Model.TotalPages)
                {
                    <a href="@Url.Action("Contact", new { page = Model.Page + 1, pageSize = Model.PageSize, search = Model.Search, status = Model.Status, type = Model.Type, createdDate = Model.CreatedDate })" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                        Sau
                    </a>
                }
            </div>
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                    <p class="text-sm text-gray-700">
                        Hiển thị <span class="font-medium">@((Model.Page - 1) * Model.PageSize + 1)</span> đến <span class="font-medium">@Math.Min(Model.Page * Model.PageSize, Model.TotalCount)</span> của <span class="font-medium">@Model.TotalCount</span> kết quả
                    </p>
                </div>
                <div>
                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                        @if (Model.Page > 1)
                        {
                            <a href="@Url.Action("Contact", new { page = Model.Page - 1, pageSize = Model.PageSize, search = Model.Search, status = Model.Status, type = Model.Type, createdDate = Model.CreatedDate })" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                <i data-lucide="chevron-left" class="w-4 h-4"></i>
                            </a>
                        }
                        
                        @for (int i = Math.Max(1, Model.Page - 2); i <= Math.Min(Model.TotalPages, Model.Page + 2); i++)
                        {
                            <a href="@Url.Action("Contact", new { page = i, pageSize = Model.PageSize, search = Model.Search, status = Model.Status, type = Model.Type, createdDate = Model.CreatedDate })" class="relative inline-flex items-center px-4 py-2 border @(i == Model.Page ? "border-green-500 bg-green-50 text-green-600" : "border-gray-300 bg-white text-gray-700 hover:bg-gray-50") text-sm font-medium">
                                @i
                            </a>
                        }
                        
                        @if (Model.Page < Model.TotalPages)
                        {
                            <a href="@Url.Action("Contact", new { page = Model.Page + 1, pageSize = Model.PageSize, search = Model.Search, status = Model.Status, type = Model.Type, createdDate = Model.CreatedDate })" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                <i data-lucide="chevron-right" class="w-4 h-4"></i>
                            </a>
                        }
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetContactAvatarClass(string status)
    {
        return status switch
        {
            "New" => "bg-red-100",
            "Read" => "bg-yellow-100", 
            "Replied" => "bg-green-100",
            "Closed" => "bg-gray-100",
            _ => "bg-blue-100"
        };
    }

    string GetContactIconClass(string status)
    {
        return status switch
        {
            "New" => "text-red-600",
            "Read" => "text-yellow-600",
            "Replied" => "text-green-600", 
            "Closed" => "text-gray-600",
            _ => "text-blue-600"
        };
    }

    string GetTypeBadgeClass(string subject)
    {
        if (subject.Contains("đặt sân") || subject.Contains("booking"))
            return "bg-blue-100 text-blue-800";
        if (subject.Contains("khiếu nại") || subject.Contains("complaint"))
            return "bg-red-100 text-red-800";
        if (subject.Contains("góp ý") || subject.Contains("suggestion"))
            return "bg-green-100 text-green-800";
        return "bg-gray-100 text-gray-800";
    }

    string GetContactType(string subject)
    {
        if (subject.Contains("đặt sân") || subject.Contains("booking"))
            return "Đặt sân";
        if (subject.Contains("khiếu nại") || subject.Contains("complaint"))
            return "Khiếu nại";
        if (subject.Contains("góp ý") || subject.Contains("suggestion"))
            return "Góp ý";
        return "Khác";
    }

    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "New" => "bg-red-100 text-red-800",
            "Read" => "bg-yellow-100 text-yellow-800",
            "Replied" => "bg-green-100 text-green-800",
            "Closed" => "bg-gray-100 text-gray-800",
            _ => "bg-blue-100 text-blue-800"
        };
    }

    string GetStatusText(string status)
    {
        return status switch
        {
            "New" => "Chưa đọc",
            "Read" => "Đã đọc", 
            "Replied" => "Đã phản hồi",
            "Closed" => "Đã đóng",
            _ => status
        };
    }
}

<!-- View Message Modal -->
<div id="messageModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
        <div class="mt-3">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium text-gray-900">Chi tiết tin nhắn</h3>
                <button onclick="closeMessageModal()" class="text-gray-400 hover:text-gray-600">
                    <i data-lucide="x" class="w-6 h-6"></i>
                </button>
            </div>
            
            <div class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Người gửi</label>
                        <input type="text" readonly class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100" value="Nguyễn Văn A">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input type="text" readonly class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100" value="nguyenvana@email.com">
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Số điện thoại</label>
                        <input type="text" readonly class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100" value="0912xxx123">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Loại</label>
                        <input type="text" readonly class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100" value="Đặt sân">
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Nội dung</label>
                    <textarea rows="4" readonly class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100">Tôi muốn đặt sân A1 vào ngày 20/01/2024 từ 18h-20h. Xin vui lòng xác nhận và gửi thông tin thanh toán.</textarea>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Phản hồi</label>
                    <textarea rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Nhập phản hồi..."></textarea>
                </div>
                
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" onclick="closeMessageModal()" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                        Đóng
                    </button>
                    <button type="button" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600">
                        Gửi phản hồi
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize Lucide icons
        lucide.createIcons();
        
        let currentContactId = null;
        
        // Message management functions
        async function viewMessage(id) {
            try {
                const response = await fetch(`/Admin/GetContactDetails?id=${id}`);
                const data = await response.json();
                
                if (data.success) {
                    const contact = data.contact;
                    currentContactId = id;
                    
                    // Populate modal with contact data
                    document.querySelector('#messageModal input[readonly]').value = contact.name;
                    document.querySelectorAll('#messageModal input[readonly]')[1].value = contact.email;
                    document.querySelectorAll('#messageModal input[readonly]')[2].value = contact.phone || 'N/A';
                    document.querySelectorAll('#messageModal input[readonly]')[3].value = contact.subject;
                    document.querySelector('#messageModal textarea[readonly]').value = contact.message;
                    
                    // Clear response textarea
                    document.querySelector('#messageModal textarea:not([readonly])').value = contact.response || '';
                    
                    document.getElementById('messageModal').classList.remove('hidden');
                    
                    // Mark as read if status is New
                    if (contact.status === 'New') {
                        await markAsRead(id);
                    }
                } else {
                    alert('Không thể tải thông tin tin nhắn: ' + data.message);
                }
            } catch (error) {
                console.error('Error loading contact details:', error);
                alert('Có lỗi xảy ra khi tải thông tin tin nhắn!');
            }
        }

        async function replyMessage(id) {
            const response = prompt('Nhập phản hồi:');
            if (response && response.trim()) {
                try {
                    const replyResponse = await fetch('/Admin/ReplyToContact', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            id: id,
                            response: response.trim()
                        })
                    });
                    
                    const data = await replyResponse.json();
                    if (data.success) {
                        alert('Phản hồi thành công!');
                        location.reload();
                    } else {
                        alert('Lỗi: ' + data.message);
                    }
                } catch (error) {
                    console.error('Error replying to contact:', error);
                    alert('Có lỗi xảy ra khi gửi phản hồi!');
                }
            }
        }

        async function deleteMessage(id) {
            if (confirm('Bạn có chắc chắn muốn xóa tin nhắn này?')) {
                try {
                    const response = await fetch(`/Admin/DeleteContact?id=${id}`, {
                        method: 'DELETE'
                    });
                    
                    const data = await response.json();
                    if (data.success) {
                        alert('Xóa tin nhắn thành công!');
                        location.reload();
                    } else {
                        alert('Lỗi: ' + data.message);
                    }
                } catch (error) {
                    console.error('Error deleting contact:', error);
                    alert('Có lỗi xảy ra khi xóa tin nhắn!');
                }
            }
        }

        async function markAsRead(id) {
            try {
                await fetch('/Admin/MarkAsRead', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id: id })
                });
            } catch (error) {
                console.error('Error marking as read:', error);
            }
        }

        function closeMessageModal() {
            document.getElementById('messageModal').classList.add('hidden');
            currentContactId = null;
        }

        // Search functionality
        document.addEventListener('DOMContentLoaded', function() {
            const searchButton = document.querySelector('button[onclick*="search"]');
            if (searchButton) {
                searchButton.onclick = function() {
                    const search = document.getElementById('searchInput').value;
                    const status = document.getElementById('statusFilter').value;
                    const type = document.getElementById('typeFilter').value;
                    const date = document.getElementById('dateFilter').value;
                    
                    const url = new URL(window.location);
                    url.searchParams.set('search', search);
                    url.searchParams.set('status', status);
                    url.searchParams.set('type', type);
                    url.searchParams.set('createdDate', date);
                    url.searchParams.set('page', '1');
                    
                    window.location.href = url.toString();
                };
            }
        });
    </script>
}
