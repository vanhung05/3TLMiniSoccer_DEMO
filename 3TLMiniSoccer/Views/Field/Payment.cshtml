@model dynamic

@{
    ViewData["Title"] = "Thanh to√°n";
    var paymentMethod = ViewBag.PaymentMethod as string;
}

<section class="py-16 bg-gray-50">
    <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
            <!-- Header -->
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-900 mb-4">Thanh to√°n ƒë·∫∑t s√¢n</h1>
                <p class="text-lg text-gray-600">Qu√©t QR Code ƒë·ªÉ thanh to√°n</p>
            </div>

            <div class="grid lg:grid-cols-2 gap-8">
                <!-- Payment Info -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h2 class="text-xl font-bold mb-6 text-gray-900">Th√¥ng tin thanh to√°n</h2>
                    
                    <div class="space-y-4">
                        <div class="flex justify-between">
                            <span class="text-gray-600">S√¢n b√≥ng:</span>
                            <span class="font-medium">@Model.FieldName</span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-gray-600">Ng√†y ƒë·∫∑t:</span>
                            <span class="font-medium">@Model.BookingDate.ToString("dd/MM/yyyy")</span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-gray-600">Th·ªùi gian:</span>
                            <span class="font-medium">@Model.StartTime.ToString(@"hh\:mm") - @Model.EndTime.ToString(@"hh\:mm")</span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-gray-600">Th·ªùi gian:</span>
                            <span class="font-medium">@Model.Duration ph√∫t (@((Model.Duration / 60.0).ToString("F1")) gi·ªù)</span>
                        </div>
                        
                        <hr class="my-4">
                        
                        <div class="flex justify-between text-lg font-bold text-green-600">
                            <span>T·ªïng c·ªông:</span>
                            <span>@Model.TotalPrice.ToString("N0") VND</span>
                        </div>
                    </div>

                    <!-- Payment Instructions -->
                    <div class="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h3 class="font-medium text-blue-900 mb-2">H∆∞·ªõng d·∫´n thanh to√°n:</h3>
                        <ol class="text-sm text-blue-800 space-y-1 list-decimal list-inside">
                            <li>M·ªü ·ª©ng d·ª•ng ng√¢n h√†ng tr√™n ƒëi·ªán tho·∫°i</li>
                            <li>Qu√©t QR Code b√™n c·∫°nh</li>
                            <li>Ki·ªÉm tra th√¥ng tin v√† x√°c nh·∫≠n thanh to√°n</li>
                            <li>Nh·∫•n "Ho√†n th√†nh thanh to√°n" sau khi chuy·ªÉn kho·∫£n</li>
                        </ol>
                    </div>
                </div>

                <!-- QR Code -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-xl font-bold text-gray-900">QR Code thanh to√°n</h2>
                        <div class="bg-red-50 border border-red-200 rounded-lg px-3 py-2">
                            <div class="flex items-center">
                                <svg class="w-5 h-5 text-red-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span class="text-red-700 font-medium">Th·ªùi gian c√≤n l·∫°i:</span>
                                <span id="paymentTimer" class="text-red-800 font-bold ml-2">10:00</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- QR Code Display -->
                    <div class="text-center">
                        <div class="bg-white border-2 border-gray-200 rounded-lg p-8 inline-block mb-4">
                            @if (!string.IsNullOrEmpty(ViewBag.QRCodeUrl))
                            {
                                <img src="@ViewBag.QRCodeUrl" alt="QR Code thanh to√°n" class="w-64 h-64 mx-auto">
                            }
                            else
                            {
                                <div class="w-64 h-64 bg-gray-100 rounded-lg flex items-center justify-center">
                                    <div class="text-center">
                                        <svg class="w-32 h-32 mx-auto mb-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 011 1v12a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm2 1v10h10V5H5z" clip-rule="evenodd"></path>
                                        </svg>
                                        <p class="text-sm text-gray-500">QR Code ƒëang ƒë∆∞·ª£c t·∫°o...</p>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <p class="text-sm text-gray-600 mb-4">
                            Qu√©t QR Code b·∫±ng ·ª©ng d·ª•ng ng√¢n h√†ng ƒë·ªÉ thanh to√°n
                        </p>
                        
                        @if (!string.IsNullOrEmpty(ViewBag.OrderId))
                        {
                            <p class="text-xs text-gray-500">
                                M√£ ƒë∆°n h√†ng: @ViewBag.OrderId
                            </p>
                        }
                    </div>

                    <!-- Bank Info -->
                    <div class="bg-gray-50 rounded-lg p-4 mb-6">
                        <h3 class="font-medium text-gray-900 mb-3">Th√¥ng tin chuy·ªÉn kho·∫£n:</h3>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-600">Ng√¢n h√†ng:</span>
                                <span class="font-medium">@(ViewBag.BankName ?? "Mbbank")</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">S·ªë t√†i kho·∫£n:</span>
                                <span class="font-medium">@(ViewBag.AccountNumber ?? "0353425450")</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Ch·ªß t√†i kho·∫£n:</span>
                                <span class="font-medium">@(ViewBag.AccountName ?? "NGUYEN VAN HUNG")</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">N·ªôi dung:</span>
                                <span class="font-medium">@Model.FieldName - @Model.BookingDate.ToString("ddMMyyyy")</span>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="space-y-3">
                        <form asp-controller="Field" asp-action="CompletePayment" method="post">
                            <input type="hidden" name="orderId" value="@ViewBag.OrderId" />
                            <button type="submit" class="w-full bg-green-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-green-700 transition-colors">
                                Ho√†n th√†nh thanh to√°n
                            </button>
                        </form>
                        
                        <!-- Test Payment Button (Development Only) -->
                        @if (ViewBag.TestMode == true)
                        {
                            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-3">
                                <p class="text-xs text-yellow-800 mb-2">üîß Ch·∫ø ƒë·ªô ph√°t tri·ªÉn:</p>
                                <button onclick="simulatePayment()" class="w-full bg-yellow-500 text-white py-2 px-4 rounded-lg font-medium hover:bg-yellow-600 transition-colors text-sm">
                                    üß™ Test Thanh To√°n (Gi·∫£ l·∫≠p)
                                </button>
                                <p class="text-xs text-yellow-700 mt-1">Ch·ªâ d√πng ƒë·ªÉ test - kh√¥ng c·∫ßn chuy·ªÉn kho·∫£n th·ª±c t·∫ø</p>
                            </div>
                        }
                        
                        <a href="@Url.Action("ConfirmBooking")" class="w-full bg-gray-200 text-gray-800 py-3 px-6 rounded-lg font-medium hover:bg-gray-300 transition-colors text-center block">
                            Quay l·∫°i
                        </a>
                    </div>
                </div>
            </div>

            <!-- Payment Status -->
            <div class="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
                <div class="flex items-center">
                    <div class="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center mr-4">
                        <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="font-medium text-yellow-900">L∆∞u √Ω quan tr·ªçng</h3>
                        <p class="text-sm text-yellow-800 mt-1">
                            Sau khi thanh to√°n th√†nh c√¥ng, ƒë·∫∑t s√¢n c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn admin ƒë·ªÉ duy·ªát. 
                            Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n trong v√≤ng 24 gi·ªù.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        let timeLeft = 600; // Default 10 minutes in seconds
        let paymentCheckInterval;
        let orderId = '@ViewBag.OrderId';
        let paymentCompleted = false;
        
        // Calculate remaining time from ExpiredAt
        @if (ViewBag.ExpiredAt != null)
        {
            <text>
            // Try different formats
            const expiredAtLocal = '@ViewBag.ExpiredAt';
            const expiredAtISO = '@ViewBag.ExpiredAtISO';
            const expiredAtUTC = '@ViewBag.ExpiredAtUTC';
            
            console.log('ExpiredAt (local):', expiredAtLocal);
            console.log('ExpiredAt (ISO):', expiredAtISO);
            console.log('ExpiredAt (UTC):', expiredAtUTC);
            
            // Try parsing different formats
            let expiredAt = null;
            let parsedSuccessfully = false;
            
            // Try UTC format first (most reliable)
            if (expiredAtUTC && expiredAtUTC !== '') {
                expiredAt = new Date(expiredAtUTC);
                if (!isNaN(expiredAt.getTime())) {
                    parsedSuccessfully = true;
                    console.log('Successfully parsed UTC format');
                }
            }
            
            // Try ISO format
            if (!parsedSuccessfully && expiredAtISO && expiredAtISO !== '') {
                expiredAt = new Date(expiredAtISO);
                if (!isNaN(expiredAt.getTime())) {
                    parsedSuccessfully = true;
                    console.log('Successfully parsed ISO format');
                }
            }
            
            // Try local format as last resort
            if (!parsedSuccessfully && expiredAtLocal && expiredAtLocal !== '') {
                expiredAt = new Date(expiredAtLocal);
                if (!isNaN(expiredAt.getTime())) {
                    parsedSuccessfully = true;
                    console.log('Successfully parsed local format');
                }
            }
            
            if (parsedSuccessfully && expiredAt) {
                const now = new Date();
                const remainingSeconds = Math.max(0, Math.floor((expiredAt - now) / 1000));
                timeLeft = remainingSeconds;
                
                console.log('ExpiredAt parsed:', expiredAt);
                console.log('Now:', now);
                console.log('Time difference (ms):', expiredAt - now);
                console.log('Remaining seconds:', remainingSeconds);
            } else {
                console.error('Failed to parse any time format, using default 10 minutes');
            }
            </text>
        }

        // Timer countdown
        function updateTimer() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            const timerElement = document.getElementById('paymentTimer');
            
            if (timerElement) {
                timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            if (timeLeft <= 0) {
                clearInterval(paymentCheckInterval);
                clearInterval(timerInterval);
                showPaymentTimeout();
                return;
            }

            timeLeft--;
        }

        // Check payment status
        async function checkPaymentStatus() {
            if (paymentCompleted) return;

            try {
                const response = await fetch('/Field/CheckPaymentStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `orderId=${encodeURIComponent(orderId)}`
                });

                const result = await response.json();
                
                if (result.success && result.status === 'completed') {
                    paymentCompleted = true;
                    clearInterval(paymentCheckInterval);
                    clearInterval(timerInterval);
                    showPaymentSuccess(result);
                }
            } catch (error) {
                console.error('Error checking payment status:', error);
            }
        }

        // Show payment success
        function showPaymentSuccess(result) {
            const successDiv = document.createElement('div');
            successDiv.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            successDiv.innerHTML = `
                <div class="bg-white rounded-lg p-8 max-w-md mx-4 text-center">
                    <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold text-gray-900 mb-2">Thanh to√°n th√†nh c√¥ng!</h3>
                    <p class="text-gray-600 mb-4">Giao d·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.</p>
                    <div class="space-y-2 text-sm text-gray-500 mb-6">
                        <p><strong>M√£ giao d·ªãch:</strong> ${result.transactionId || 'N/A'}</p>
                        <p><strong>S·ªë ti·ªÅn:</strong> ${formatNumber(result.amount || 0)} VND</p>
                        <p><strong>Th·ªùi gian:</strong> ${result.paymentDate || result.transactionDate || new Date().toLocaleString('vi-VN')}</p>
                    </div>
                    <button onclick="window.location.href='/Field/BookingSuccess'" 
                            class="w-full bg-green-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-green-700 transition-colors">
                        Xem chi ti·∫øt ƒë·∫∑t s√¢n
                    </button>
                </div>
            `;
            document.body.appendChild(successDiv);
        }

        // Show payment timeout
        function showPaymentTimeout() {
            const timeoutDiv = document.createElement('div');
            timeoutDiv.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            timeoutDiv.innerHTML = `
                <div class="bg-white rounded-lg p-8 max-w-md mx-4 text-center">
                    <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold text-gray-900 mb-2">H·∫øt th·ªùi gian thanh to√°n</h3>
                    <p class="text-gray-600 mb-4">Phi√™n thanh to√°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª±c hi·ªán l·∫°i.</p>
                    <button onclick="window.location.href='/Field/ConfirmBooking'" 
                            class="w-full bg-blue-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors">
                        Th·ª≠ l·∫°i
                    </button>
                </div>
            `;
            document.body.appendChild(timeoutDiv);
        }

        // Initialize timer and payment checking
        document.addEventListener('DOMContentLoaded', function() {
            // Start timer
            const timerInterval = setInterval(updateTimer, 1000);
            
            // Start payment checking every 5 seconds
            paymentCheckInterval = setInterval(checkPaymentStatus, 5000);
            
            // Initial timer update
            updateTimer();
        });

        // Manual payment completion
        document.querySelector('form').addEventListener('submit', function(e) {
            if (paymentCompleted) {
                return true;
            }
            
            if (confirm('B·∫°n ƒë√£ ho√†n th√†nh thanh to√°n ch∆∞a?')) {
                // Check payment status immediately
                checkPaymentStatus();
                return true;
            } else {
                e.preventDefault();
                alert('Vui l√≤ng ho√†n th√†nh thanh to√°n tr∆∞·ªõc khi nh·∫•n n√∫t n√†y');
                return false;
            }
        });

        // Format s·ªë ti·ªÅn
        function formatNumber(number) {
            return new Intl.NumberFormat('vi-VN').format(number);
        }

        // Simulate payment for testing
        async function simulatePayment() {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën gi·∫£ l·∫≠p thanh to√°n th√†nh c√¥ng? (Ch·ªâ d√πng ƒë·ªÉ test)')) {
                try {
                    // Show loading
                    const button = event.target;
                    const originalText = button.textContent;
                    button.textContent = 'ƒêang x·ª≠ l√Ω...';
                    button.disabled = true;

                    // Call test payment API
                    const response = await fetch('/Field/TestPayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `orderId=${encodeURIComponent(orderId)}`
                    });

                    if (response.ok) {
                        // Get the response to extract booking ID
                        const responseData = await response.json();
                        console.log('TestPayment response:', responseData);
                        
                        if (responseData.success && responseData.bookingId) {
                            window.location.href = `/Field/BookingSuccess/${responseData.bookingId}`;
                        } else if (responseData.success) {
                            // If success but no bookingId, show message
                            alert('Test thanh to√°n th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ ID booking. Vui l√≤ng ki·ªÉm tra l·∫°i.');
                            window.location.href = '/Field/Index';
                        } else {
                            // Show error message
                            alert('L·ªói: ' + (responseData.message || 'Kh√¥ng x√°c ƒë·ªãnh'));
                        }
                    } else {
                        // Handle error
                        const errorText = await response.text();
                        alert('C√≥ l·ªói khi test thanh to√°n: ' + errorText);
                    }
                    
                } catch (error) {
                    console.error('Error simulating payment:', error);
                    alert('C√≥ l·ªói khi gi·∫£ l·∫≠p thanh to√°n: ' + error.message);
                } finally {
                    // Restore button
                    button.textContent = originalText;
                    button.disabled = false;
                }
            }
        }
    </script>
}
